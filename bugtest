#substratesInThisRxn#######################################################
# Generated programmatically by CSV2JuliaDiffEq.      #
# http://github.com/SiFTW/CSV2JuliaDiffEq             #
#######################################################
# generated from:
#    reactions file: reactions.csv
#    parameters file file: parameters_k1_numbers.csv
#    rate law file: ..\rateLaws.csv
#
# Statistics:
#    Equations:24
#    Parameters:120
#######################################################

using DifferentialEquations, Plots
include("scanIncludes.jl")
include("variableNames.jl")
function odeFile(dy,y,p,t)
	C=y[1]
	Cp=y[2]
	CB=y[3]
	CpB=y[4]
	CM=y[5]
	CpM=y[6]
	CBM=y[7]
	CpBM=y[8]
	B=y[9]
	M=y[10]
	BM=y[11]
	TAK1=y[12]
	TAK1p=y[13]
	IKKp=y[14]
	TAK1C=y[15]
	TAK1pC=y[16]
	IKKpC=y[17]
	IKKppC=y[18]
	IKK=y[19]
	A20=y[20]
	IKKC=y[21]
	IKKpp=y[22]
	IKKi=y[23]
	IKKa=y[24]
	#C
	dy[1]= -C*paramFun("k1_Cp0",modify) - (p(t)*C*paramFun("k1_CpS",modify))/(C+paramFun("k2_kmCpS",modify)) - C*B*paramFun("k1_CaB",modify) + CB*paramFun("k1_CdB",modify) - C*M*paramFun("k1_CaM",modify) + CM*paramFun("k1_CdM",modify) - C*BM*paramFun("k1_CaBM",modify) + CBM*paramFun("k1_CdBM",modify)
	#Cp
	dy[2]= + C*paramFun("k1_Cp0",modify) + (p(t)*C*paramFun("k1_CpS",modify))/(C+paramFun("k2_kmCpS",modify)) - (Cp * paramFun("k1_Cpu",modify)) / (Cp + paramFun("k2_kmCpu",modify)) + (Cp * paramFun("k1_Cpu",modify)) / (Cp + paramFun("k2_kmCpu",modify)) - Cp*B*paramFun("k1_CpaB",modify) + CpB*paramFun("k1_CpdB",modify) - Cp*M*paramFun("k1_CpaM",modify) + CpM*paramFun("k1_CpdM",modify) - Cp*BM*paramFun("k1_CpaBM",modify) + CpBM*paramFun("k1_CpdBM",modify)
	#CB
	dy[3]= -CB*paramFun("k1_CpB0",modify) - (p(t)*CB*paramFun("k1_CpBS",modify))/(CB+paramFun("k2_kmCpBS",modify)) + (CpB * paramFun("k1_CpBu",modify)) / (CpB + paramFun("k2_kmCpBu",modify)) + C*B*paramFun("k1_CaB",modify) - CB*paramFun("k1_CdB",modify) - CB*M*paramFun("k1_CBaM",modify) + CBM*paramFun("k1_CBdM",modify) - paramFun("k1_TaB",modify) * ( CB+CpB ) * TAK1 - paramFun("k1_TpaB",modify) * ( CB+CpB ) * TAK1p - paramFun("k1_IaB",modify) * ( CB+CpB ) * IKK - paramFun("k1_IpaB",modify) * ( CB+CpB ) * IKKp
	#CpB
	dy[4]= + CB*paramFun("k1_CpB0",modify) + (p(t)*CB*paramFun("k1_CpBS",modify))/(CB+paramFun("k2_kmCpBS",modify)) - (CpB * paramFun("k1_CpBu",modify)) / (CpB + paramFun("k2_kmCpBu",modify)) + Cp*B*paramFun("k1_CpaB",modify) - CpB*paramFun("k1_CpdB",modify) - CpB*M*paramFun("k1_CpBaM",modify) + CpBM*paramFun("k1_CpBdM",modify) - paramFun("k1_TaB",modify) * ( CB+CpB ) * TAK1 - paramFun("k1_TpaB",modify) * ( CB+CpB ) * TAK1p - paramFun("k1_IaB",modify) * ( CB+CpB ) * IKK - paramFun("k1_IpaB",modify) * ( CB+CpB ) * IKKp
	#CM
	dy[5]= -CM*paramFun("k1_CpM0",modify) - (p(t)*CM*paramFun("k1_CpMS",modify))/(CM+paramFun("k2_kmCpMS",modify)) + CpM*paramFun("k1_CpMu",modify) + C*M*paramFun("k1_CaM",modify) - CM*paramFun("k1_CdM",modify) - CM*B*paramFun("k1_CMaB",modify) + CBM*paramFun("k1_CMdB",modify) - paramFun("k1_TaM",modify) * ( CM+CpM ) * TAK1 - paramFun("k1_TpaM",modify) * ( CM+CpM ) * TAK1p - paramFun("k1_IaM",modify) * ( CM+CpM ) * IKK - paramFun("k1_IpaM",modify) * ( CM+CpM ) * IKKp
	#CpM
	dy[6]= + CM*paramFun("k1_CpM0",modify) + (p(t)*CM*paramFun("k1_CpMS",modify))/(CM+paramFun("k2_kmCpMS",modify)) - CpM*paramFun("k1_CpMu",modify) + Cp*M*paramFun("k1_CpaM",modify) - CpM*paramFun("k1_CpdM",modify) - CpM*B*paramFun("k1_CpMaB",modify) + CpBM*paramFun("k1_CpMdB",modify) - paramFun("k1_TaM",modify) * ( CM+CpM ) * TAK1 - paramFun("k1_TpaM",modify) * ( CM+CpM ) * TAK1p - paramFun("k1_IaM",modify) * ( CM+CpM ) * IKK - paramFun("k1_IpaM",modify) * ( CM+CpM ) * IKKp
	#CBM
	dy[7]= -CBM*paramFun("k1_CpBM0",modify) - (p(t)*CBM*paramFun("k1_CpBMS",modify))/(CBM+paramFun("k2_kmCpBMS",modify)) + (CpBM * paramFun("k1_CpBMu",modify)) / (CpBM + paramFun("k2_kmCpBMu",modify)) + CB*M*paramFun("k1_CBaM",modify) - CBM*paramFun("k1_CBdM",modify) + CM*B*paramFun("k1_CMaB",modify) - CBM*paramFun("k1_CMdB",modify) + C*BM*paramFun("k1_CaBM",modify) - CBM*paramFun("k1_CdBM",modify) - paramFun("k1_TaBM",modify) * ( CBM+CpBM ) * TAK1 + TAK1C*paramFun("k1_TCd",modify) - paramFun("k1_TpaBM",modify) * ( CBM+CpBM ) * TAK1p + TAK1pC*paramFun("k1_TpCd",modify) - paramFun("k1_IaBM",modify) * ( CBM+CpBM ) * IKK + IKKC*paramFun("k1_ICd",modify) - paramFun("k1_IpaBM",modify) * ( CBM+CpBM ) * IKKp + IKKpC*paramFun("k1_IpCd",modify) + IKKppC*paramFun("k1_IppCd",modify)
	#CpBM
	dy[8]= + CBM*paramFun("k1_CpBM0",modify) + (p(t)*CBM*paramFun("k1_CpBMS",modify))/(CBM+paramFun("k2_kmCpBMS",modify)) - (CpBM * paramFun("k1_CpBMu",modify)) / (CpBM + paramFun("k2_kmCpBMu",modify)) + CpB*M*paramFun("k1_CpBaM",modify) - CpBM*paramFun("k1_CpBdM",modify) + CpM*B*paramFun("k1_CpMaB",modify) - CpBM*paramFun("k1_CpMdB",modify) + Cp*BM*paramFun("k1_CpaBM",modify) - CpBM*paramFun("k1_CpdBM",modify) - paramFun("k1_TaBM",modify) * ( CBM+CpBM ) * TAK1 - paramFun("k1_TpaBM",modify) * ( CBM+CpBM ) * TAK1p - paramFun("k1_IaBM",modify) * ( CBM+CpBM ) * IKK - paramFun("k1_IpaBM",modify) * ( CBM+CpBM ) * IKKp
	#B
	dy[9]= -B*M*paramFun("k1_BaM",modify) + BM*paramFun("k1_BdM",modify) - C*B*paramFun("k1_CaB",modify) + CB*paramFun("k1_CdB",modify) - Cp*B*paramFun("k1_CpaB",modify) + CpB*paramFun("k1_CpdB",modify) - CM*B*paramFun("k1_CMaB",modify) + CBM*paramFun("k1_CMdB",modify) - CpM*B*paramFun("k1_CpMaB",modify) + CpBM*paramFun("k1_CpMdB",modify)
	#M
	dy[10]= -B*M*paramFun("k1_BaM",modify) + BM*paramFun("k1_BdM",modify) - C*M*paramFun("k1_CaM",modify) + CM*paramFun("k1_CdM",modify) - Cp*M*paramFun("k1_CpaM",modify) + CpM*paramFun("k1_CpdM",modify) - CB*M*paramFun("k1_CBaM",modify) + CBM*paramFun("k1_CBdM",modify) - CpB*M*paramFun("k1_CpBaM",modify) + CpBM*paramFun("k1_CpBdM",modify)
	#BM
	dy[11]= + B*M*paramFun("k1_BaM",modify) - BM*paramFun("k1_BdM",modify) - C*BM*paramFun("k1_CaBM",modify) + CBM*paramFun("k1_CdBM",modify) - Cp*BM*paramFun("k1_CpaBM",modify) + CpBM*paramFun("k1_CpdBM",modify)
	#TAK1
	dy[12]= -TAK1*paramFun("k1_Tp0",modify) - (Cp*TAK1*paramFun("k1_CTpS",modify))/(TAK1+paramFun("k2_kmCTpS",modify)) - (CpB*TAK1*paramFun("k1_CBTpS",modify))/(TAK1+paramFun("k2_kmCBTpS",modify)) - (CpM*TAK1*paramFun("k1_CMTpS",modify))/(TAK1+paramFun("k2_kmCMTpS",modify)) - (CpBM*TAK1*paramFun("k1_CBMTpS",modify))/(TAK1+paramFun("k2_kmCBMTpS",modify)) - (IKKp*TAK1*paramFun("k1_TpIKK1",modify))/(TAK1+paramFun("k2_kmTpIKK1",modify)) + (TAK1p * paramFun("k1_Tpu",modify)) / (TAK1p + paramFun("k2_kmTpu",modify)) - paramFun("k1_TaB",modify) * ( CB+CpB ) * TAK1 - paramFun("k1_TaM",modify) * ( CM+CpM ) * TAK1 - paramFun("k1_TaBM",modify) * ( CBM+CpBM ) * TAK1 + TAK1C*paramFun("k1_TCd",modify)
	#TAK1p
	dy[13]= + TAK1*paramFun("k1_Tp0",modify) + (Cp*TAK1*paramFun("k1_CTpS",modify))/(TAK1+paramFun("k2_kmCTpS",modify)) + (CpB*TAK1*paramFun("k1_CBTpS",modify))/(TAK1+paramFun("k2_kmCBTpS",modify)) + (CpM*TAK1*paramFun("k1_CMTpS",modify))/(TAK1+paramFun("k2_kmCMTpS",modify)) + (CpBM*TAK1*paramFun("k1_CBMTpS",modify))/(TAK1+paramFun("k2_kmCBMTpS",modify)) + (IKKp*TAK1*paramFun("k1_TpIKK1",modify))/(TAK1+paramFun("k2_kmTpIKK1",modify)) - (TAK1p * paramFun("k1_Tpu",modify)) / (TAK1p + paramFun("k2_kmTpu",modify)) - paramFun("k1_TpaB",modify) * ( CB+CpB ) * TAK1p - paramFun("k1_TpaM",modify) * ( CM+CpM ) * TAK1p - paramFun("k1_TpaBM",modify) * ( CBM+CpBM ) * TAK1p + TAK1pC*paramFun("k1_TpCd",modify)
	#IKKp
	dy[14]=0 + IKK*paramFun("k1_Ip0",modify) + (TAK1p*IKK*paramFun("k1_IpTAKp",modify))/((IKK+paramFun("k2_kmIpTAKp",modify))*A20) + (TAK1pC*IKK*paramFun("k1_IpTAKpC",modify))/((IKK+paramFun("k2_kmIpTAKpC",modify))*A20) - (IKKp * paramFun("k1_Ipu",modify)) / (IKKp + paramFun("k2_kmIpu",modify)) - paramFun("k1_IpaB",modify) * ( CB+CpB ) * IKKp - paramFun("k1_IpaM",modify) * ( CM+CpM ) * IKKp - paramFun("k1_IpaBM",modify) * ( CBM+CpBM ) * IKKp + IKKpC*paramFun("k1_IpCd",modify)
	#TAK1C
	dy[15]= -TAK1C*paramFun("k1_TpC0",modify) - (Cp*TAK1C*paramFun("k1_CTpCS",modify))/(TAK1C+paramFun("k2_kmCTpCS",modify)) - (CpB*TAK1C*paramFun("k1_CBTpCS",modify))/(TAK1C+paramFun("k2_kmCBTpCS",modify)) - (CpM*TAK1C*paramFun("k1_CMTpCS",modify))/(TAK1C+paramFun("k2_kmCMTpCS",modify)) - (CpBM*TAK1C*paramFun("k1_CBMTpCS",modify))/(TAK1C+paramFun("k2_kmCBMTpCS",modify)) - (IKKp*TAK1C*paramFun("k1_TpCIKK1",modify))/(TAK1C+paramFun("k2_kmTpCIKK1",modify)) - (IKKpC*TAK1C*paramFun("k1_TpCIKK2",modify))/(TAK1C+paramFun("k2_kmTpCIKK2",modify)) - (IKKppC*TAK1C*paramFun("k1_TpCIKK3",modify))/(TAK1C+paramFun("k2_kmTpCIKK3",modify)) - (TAK1C * paramFun("k1_TpCu",modify)) / (TAK1C + paramFun("k2_kmTpCu",modify)) + paramFun("k1_TaB",modify) * ( CB+CpB ) * TAK1 + paramFun("k1_TaM",modify) * ( CM+CpM ) * TAK1 + paramFun("k1_TaBM",modify) * ( CBM+CpBM ) * TAK1 - TAK1C*paramFun("k1_TCd",modify)
	#TAK1pC
	dy[16]= + TAK1C*paramFun("k1_TpC0",modify) + (Cp*TAK1C*paramFun("k1_CTpCS",modify))/(TAK1C+paramFun("k2_kmCTpCS",modify)) + (CpB*TAK1C*paramFun("k1_CBTpCS",modify))/(TAK1C+paramFun("k2_kmCBTpCS",modify)) + (CpM*TAK1C*paramFun("k1_CMTpCS",modify))/(TAK1C+paramFun("k2_kmCMTpCS",modify)) + (CpBM*TAK1C*paramFun("k1_CBMTpCS",modify))/(TAK1C+paramFun("k2_kmCBMTpCS",modify)) + (IKKp*TAK1C*paramFun("k1_TpCIKK1",modify))/(TAK1C+paramFun("k2_kmTpCIKK1",modify)) + (IKKpC*TAK1C*paramFun("k1_TpCIKK2",modify))/(TAK1C+paramFun("k2_kmTpCIKK2",modify)) + (IKKppC*TAK1C*paramFun("k1_TpCIKK3",modify))/(TAK1C+paramFun("k2_kmTpCIKK3",modify)) + (TAK1C * paramFun("k1_TpCu",modify)) / (TAK1C + paramFun("k2_kmTpCu",modify)) + paramFun("k1_TpaB",modify) * ( CB+CpB ) * TAK1p + paramFun("k1_TpaM",modify) * ( CM+CpM ) * TAK1p + paramFun("k1_TpaBM",modify) * ( CBM+CpBM ) * TAK1p - TAK1pC*paramFun("k1_TpCd",modify)
	#IKKpC
	dy[17]=0 + IKKC*paramFun("k1_ICp0",modify) + (TAK1p*IKKC*paramFun("k1_ICpTAKp",modify))/((IKKC+paramFun("k2_kmICpTAKp",modify))*A20) + (TAK1pC*IKKC*paramFun("k1_ICpTAKpC",modify))/((IKKC+paramFun("k2_kmICpTAKpC",modify))*A20) - (IKKpC * paramFun("k1_IpCu",modify)) / (IKKpC + paramFun("k2_kmIpCu",modify)) + paramFun("k1_IpaB",modify) * ( CB+CpB ) * IKKp + paramFun("k1_IpaM",modify) * ( CM+CpM ) * IKKp + paramFun("k1_IpaBM",modify) * ( CBM+CpBM ) * IKKp - IKKpC*paramFun("k1_IpCd",modify) - (IKKpC * paramFun("k1_IpCfaIKKpC",modify)) / (IKKpC + paramFun("k2_kmIpCfaIKKpC",modify)) - (IKKppC*IKKpC*paramFun("k1_IpCfaIKKppC",modify))/(IKKpC+paramFun("k2_kmIpCfaIKKppC",modify)) + (IKKppC * paramFun("k1_IppCu",modify)) / (IKKppC + paramFun("k2_kmIppCu",modify))
	#IKKppC
	dy[18]=0 + (IKKpC * paramFun("k1_IpCfaIKKpC",modify)) / (IKKpC + paramFun("k2_kmIpCfaIKKpC",modify)) + (IKKppC*IKKpC*paramFun("k1_IpCfaIKKppC",modify))/(IKKpC+paramFun("k2_kmIpCfaIKKppC",modify)) - (IKKppC * paramFun("k1_IppCu",modify)) / (IKKppC + paramFun("k2_kmIppCu",modify)) - IKKppC*paramFun("k1_IppCd",modify) - (IKKppC * paramFun("k1_Ipphf",modify)) / (IKKppC + paramFun("k2_kmIpphf",modify))
	#IKK
	dy[19]= -IKK*paramFun("k1_Ip0",modify) - (TAK1p*IKK*paramFun("k1_IpTAKp",modify))/((IKK+paramFun("k2_kmIpTAKp",modify))*A20) - (TAK1pC*IKK*paramFun("k1_IpTAKpC",modify))/((IKK+paramFun("k2_kmIpTAKpC",modify))*A20) + (IKKp * paramFun("k1_Ipu",modify)) / (IKKp + paramFun("k2_kmIpu",modify)) - paramFun("k1_IaB",modify) * ( CB+CpB ) * IKK - paramFun("k1_IaM",modify) * ( CM+CpM ) * IKK - paramFun("k1_IaBM",modify) * ( CBM+CpBM ) * IKK + IKKC*paramFun("k1_ICd",modify) + (IKKi * paramFun("k1_Iir",modify)) / (IKKi + paramFun("k2_kmIir",modify))
	#A20
	dy[20]=0 + (IKKp + IKKpC + IKKpp + IKKppC) *paramFun("k1_A20_linearinduction",modify) - A20*paramFun("k1_A20log2halflife",modify)
	#IKKC
	dy[21]= -IKKC*paramFun("k1_ICp0",modify) - (TAK1p*IKKC*paramFun("k1_ICpTAKp",modify))/((IKKC+paramFun("k2_kmICpTAKp",modify))*A20) - (TAK1pC*IKKC*paramFun("k1_ICpTAKpC",modify))/((IKKC+paramFun("k2_kmICpTAKpC",modify))*A20) + (IKKpC * paramFun("k1_IpCu",modify)) / (IKKpC + paramFun("k2_kmIpCu",modify)) + paramFun("k1_IaB",modify) * ( CB+CpB ) * IKK + paramFun("k1_IaM",modify) * ( CM+CpM ) * IKK + paramFun("k1_IaBM",modify) * ( CBM+CpBM ) * IKK - IKKC*paramFun("k1_ICd",modify)
	#IKKpp
	dy[22]= + IKKppC*paramFun("k1_IppCd",modify) - (IKKpp * paramFun("k1_IppChf",modify)) / (IKKpp + paramFun("k2_kmIppChf",modify))
	#IKKi
	dy[23]= + (IKKppC * paramFun("k1_Ipphf",modify)) / (IKKppC + paramFun("k2_kmIpphf",modify)) + (IKKpp * paramFun("k1_IppChf",modify)) / (IKKpp + paramFun("k2_kmIppChf",modify)) - (IKKi * paramFun("k1_Iir",modify)) / (IKKi + paramFun("k2_kmIir",modify))
	#IKKa
	dy[24]= + (IKKp+IKKpC+IKKpp+IKKppC) - (IKKp+IKKpC+IKKpp+IKKppC)
end
function originalsignal(t)
	# global PHASE
	# global DOSE
	if PHASE == 1
		sinput=1.0;
		slate=0.05;
		sbase=0.0;
		tpulse=0.25;
		traise=0.5;
		tdecay=0.5;
		tdelay=0.0;
	else
		sinput = 1.0 - (1.0)*DOSE;
		#sbase = 0.01; #commented in original
		tpulse = 0.25;
		traise = 0.5;
		tdecay = 0.5;
		tdelay = 0.0;
		#slate = 0.05 - (0.05 - 0.01)*DOSE; #this line would make slate=0.01*DOSE. Commented in original
		sbase=0.0;
		slate=0.05 - (0.05)*DOSE;
	end

	signal=sbase;

	if float(t) <= float(tdelay) || PHASE==1
		signal = sbase;
	elseif tdelay < t && t <= (traise + tdelay)
		signal = (t - tdelay)*(sinput - sbase)/traise + sbase;
	elseif (traise + tdelay) < t && t <= (tpulse + traise + tdelay)
		signal = sinput;
	elseif (tpulse + traise + tdelay) < t
		signal = (sinput - slate)*exp(-(t - tpulse - traise - tdelay)/tdecay) + slate;
	end
	return signal
end
function plotallspeciessignalpt(phase2_sollist,#=phase1_sollist,=#tspan,flag=false)
	specie_names=["C","Cp","CB","CpB","CM","CpM","CBM","CpBM","B","M","BM","TAK1","TAK1p","IKKp","TAK1C","TAK1pC","IKKpC","IKKppC","IKK","A20","IKKC","IKKpp","IKKi","IKKa"];
    subplotlist=[]
    zlist=[]
	push!(zlist,plot(map(x->originalsignal(x),range(1,tspan[2],step=1)),title="signal",linecolor="green",ylim=(0,Inf)))
    if length(phase2_sollist)==1
        jlength=1
	else
        jlength=length(phase2_sollist[1][1])
    end
	if flag==true
		jlength=flag
	end
	for j=1:jlength
	    z=[]
	    for i =1:length(phase2_sollist)
	       yv=[]
	       for ii in range(0,tspan[2],step=1)
	       a=sollist[i](ii)
		   # print("\e[2K") # clear whole line
		   # print("\e[1G")
		   # print("specie: ",j,"  iter:",i,"  time:",ii)
	       push!(yv,a[j])
	       end
	       push!(z,yv)
	    end
        if length(phase2_sollist)==1
	        m=plot(z,title=specie_names[j])
	    else
            m=plot(z,title=specie_names[j],color_palette=palette([:red,:blue],length(phase2_sollist)))
        end
        push!(zlist,m)
	end
    push!(zlist,current()) #most recent graph appended
    return zlist
end

u0=ones(24)*0.2; u0[1]=1; u0[9]=1; u0[10]=1; u0[12]=1; u0[19]=1; u0[20]=0.1; u0[24]=(u0[14]+u0[17]+u0[18]+u0[22]);
u0[4]=0.3; u0[6]=0.3; u0[7]=0.3
phase1_tspan=[0.0,1000.0]
tspan=[0.0,360.0]
global DOSE = 1.0 #tells the originalsignal function to be on or off

phase1_sollist=[]
sollist=[]
#the indented block can be enclosed in a loop but hopefully not necessary
for n = [0.1,1]
	modify["k1_A20_linearinduction"]=n
	u0=ones(24)*0.2; u0[1]=1; u0[9]=1; u0[10]=1; u0[12]=1; u0[19]=1; u0[20]=0.1; u0[24]=(u0[14]+u0[17]+u0[18]+u0[22]);
	u0[4]=0.3; u0[6]=0.3; u0[7]=0.3;
	global PHASE = 1
	problemphase1=ODEProblem(odeFile,u0,phase1_tspan,originalsignal)
	phase1sol=solve(problemphase1)
	u0_endofphase1=float(phase1sol[end])
	push!(phase1_sollist, phase1sol)
	global PHASE = 2
	problemphase2=ODEProblem(odeFile,u0_endofphase1,tspan,originalsignal)
	#problemphase2=ODEProblem(odeFile,u0,tspan,originalsignal) ##i would use this to ignore the steady state phase and use u0
	sol=solve(problemphase2)
	push!(sollist,sol)
end  
nsubplotlist=plotallspeciessignalpt(sollist,tspan)
nsubplotlist=plotallspeciessignalpt(phase1_sollist,[0.0,1000.0])

plot(nsubplotlist[1],nsubplotlist[2],nsubplotlist[3],nsubplotlist[4],nsubplotlist[5],nsubplotlist[6],nsubplotlist[7],nsubplotlist[8],nsubplotlist[9],nsubplotlist[10],nsubplotlist[11],nsubplotlist[12],nsubplotlist[13],nsubplotlist[14],nsubplotlist[15],nsubplotlist[16],nsubplotlist[17],nsubplotlist[18],nsubplotlist[19],nsubplotlist[20],nsubplotlist[21],nsubplotlist[22],nsubplotlist[23],nsubplotlist[24],size=[1250,800],legend=:none)
